.container {
    display: flex; /* or inline-flex */
  }

  .container {
    flex-direction: row | row-reverse | column | column-reverse;
  }

  .container {
    flex-wrap: nowrap | wrap | wrap-reverse;
  }

  .container {
    flex-flow: column wrap;
  }

  .container {
    justify-content: flex-start | flex-end | center | space-between | space-around | space-evenly | start | end | left | right ... + safe | unsafe;
  }

/*  The safest values are flex-start, flex-end, and center.
There are also two additional keywords you can pair with these values: 
safe and unsafe. Using safe ensures that however you do this type of positioning, 
you can’t push an element such that it renders off-screen 
(e.g. off the top) in such a way the content can’t be scrolled too 
(called “data loss”).*/

.container {
    align-items: stretch | flex-start | flex-end | center | baseline | first baseline | last baseline | start | end | self-start | self-end + ... safe | unsafe;
  } 
  
  /* There are also two additional keywords you can pair with these values: 
  safe and unsafe.*/

  .container {
    align-content: flex-start | flex-end | center | space-between | space-around | space-evenly | stretch | start | end | baseline | first baseline | last baseline + ... safe | unsafe;
  }
  /* Note: This property only takes effect on multi-line flexible containers, 
  where flex-wrap is set to either wrap or wrap-reverse). 
  A single-line flexible container 
  (i.e. where flex-wrap is set to its default value, no-wrap) 
  will not reflect align-content.
  The safe and unsafe modifier keywords can be used*/
  
  .container {
    display: flex;
    ...
    gap: 10px;
    gap: 10px 20px; /* row-gap column gap */
    row-gap: 10px;
    column-gap: 20px;
  }

  /*The behavior could be thought of as a minimum gutter, 
  as if the gutter is bigger somehow 
  (because of something like justify-content: space-between;) 
  then the gap will only take effect if that space would end up smaller.

It is not exclusively for flexbox, gap works in grid and multi-column layout 
as well.*/

.item {
    order: 5; /* default is 0 */
  }

  /*By default, flex items are laid out in the source order. 
  However, the order property controls the order in which they appear 
  in the flex container. Items with the same order revert to source order.*/

  .item {
    flex-grow: 4; /* default 0 */
  }
  
  /*If all items have flex-grow set to 1, 
  the remaining space in the container
  will be distributed equally to all children. 
  If one of the children has a value of 2, 
  the remaining space would take up twice as much space as the others 
  (or it will try to, at least). Negative numbers are invalid.*/

  .item {
    flex-shrink: 3; /* default 1 */
  }

  /*This defines the ability for a flex item to shrink if necessary.
  Negative numbers are invalid.*/

  .item {
    flex-basis:  | auto; /* default auto */
  } 

  /* This defines the default size of an element 
  before the remaining space is distributed. 
  It can be a length (e.g. 20%, 5rem, etc.) 
  or a keyword. 
  The auto keyword means “look at my width or height property” 
  (which was temporarily done by the main-size keyword until deprecated). 
  The content keyword means “size it based on the item’s content” 
  – this keyword isn’t well supported yet, so it’s hard to test and harder to
   know what its brethren max-content, min-content, and fit-content do. 
   If set to 0, the extra space around content isn’t factored in. 
   If set to auto, the extra space is distributed based on its flex-grow value. */

   .item {
    flex: none | [ <'flex-grow'> <'flex-shrink'>? || <'flex-basis'> ]
  }
  
  /* This is the shorthand for flex-grow, flex-shrink and flex-basis combined. 
  The second and third parameters (flex-shrink and flex-basis) are optional. 
  The default is 0 1 auto, but if you set it with a single number value, 
  it’s like 1 0. It is recommended that you use this shorthand property rather
  than set the individual properties. The shorthand sets the other values 
  intelligently. */

  .item {
    align-self: auto | flex-start | flex-end | center | baseline | stretch;
  } 

  /* This allows the default alignment (or the one specified by align-items) 
  to be overridden for individual flex items.

  Please see the align-items explanation to understand the available values.
  Note that float, clear and vertical-align have no effect on a flex item. */

  @mixin flexbox() {
    display: -webkit-box;
    display: -moz-box;
    display: -ms-flexbox;
    display: -webkit-flex;
    display: flex;
  }
  
  @mixin flex($values) {
    -webkit-box-flex: $values;
    -moz-box-flex:  $values;
    -webkit-flex:  $values;
    -ms-flex:  $values;
    flex:  $values;
  }
  
  @mixin order($val) {
    -webkit-box-ordinal-group: $val;  
    -moz-box-ordinal-group: $val;     
    -ms-flex-order: $val;     
    -webkit-order: $val;  
    order: $val;
  }
  
  .wrapper {
    @include flexbox();
  }
  
  .item {
    @include flex(1 200px);
    @include order(2);
  }

  /* Flexbox requires some vendor prefixing to support the most browsers 
  possible. It doesn’t just include prepending properties with the vendor prefix,
   but there are actually entirely different property and value names. 
   This is because the Flexbox spec has changed over time, creating an 
   “old”, “tweener”, and “new” versions.

Perhaps the best way to handle this is to write in the new (and final) syntax
and run your CSS through Autoprefixer, which handles the fallbacks very well.

Alternatively, here’s a Sass @mixin to help with some of the prefixing, 
which also gives you an idea of what kind of things need to be done:*/

/* examples*/

.parent {
    display: flex;
    height: 300px; /* Or whatever */
  }
  
  .child {
    width: 100px;  /* Or whatever */
    height: 100px; /* Or whatever */
    margin: auto;  /* Magic! */
  }

  /* Let’s start with a very very simple example, solving an almost daily 
  problem: perfect centering. It couldn’t be any simpler if you use flexbox.
  This relies on the fact a margin set to auto in a flex container absorb extra
  space. So setting a margin of auto will make the item perfectly centered
   in both axes.*/

  .flex-container {
    /* We first create a flex layout context */
    display: flex;
  
    /* Then we define the flow direction 
       and if we allow the items to wrap 
     * Remember this is the same as:
     * flex-direction: row;
     * flex-wrap: wrap;
     */
    flex-flow: row wrap;
  
    /* Then we define how is distributed the remaining space */
    justify-content: space-around;

    padding: 0;
    margin: 0;
    list-style: none;
  }

  .flex-item {
    background: tomato;
    padding: 5px;
    width: 200px;
    height: 150px;
    margin-top: 10px;
    line-height: 150px;
    color: white;
    font-weight: bold;
    font-size: 3em;
    text-align: center;
  }

  /* Now let’s use some more properties. Consider a list of 6 items, 
  all with fixed dimensions, but can be auto-sized. 
  We want them to be evenly distributed on the horizontal axis so that 
  when we resize the browser, everything scales nicely, 
  and without media queries.*/

  /* Large */
.navigation {
    display: flex;
    flex-flow: row wrap;
    /* This aligns items to the end line on main-axis */
    justify-content: flex-end;
  }
  
  /* Medium screens */
  @media all and (max-width: 800px) {
    .navigation {
      /* When on medium sized screens, we center it by evenly distributing empty space around items */
      justify-content: space-around;
    }
  }
  
  /* Small screens */
  @media all and (max-width: 500px) {
    .navigation {
      /* On small screens, we are no longer using row direction but column */
      flex-direction: column;
    }
  }

  /* Let’s try something else. Imagine we have a right-aligned navigation element
   on the very top of our website, but we want it to be centered on medium-sized
   screens and single-columned on small devices. Easy enough.*/

   .navigation {
    display: flex;
    flex-flow: row wrap;
    justify-content: flex-end;
    
    list-style: none;
    margin: 0; 
    background: deepskyblue;
  }
  
  .navigation a {
    text-decoration: none;
    display: block;
    padding: 1em;
    color: white;
  }
  
  .navigation a:hover {
    background: #1565C0;
  }
  
  @media all and (max-width: 800px) {
    .navigation {
      justify-content: space-around;
    }
  }
  
  @media all and (max-width: 600px) {
    .navigation {
      flex-flow: column wrap;
      padding: 0;
    }
    .navigation a { 
      text-align: center; 
      padding: 10px;
      border-top: 1px solid rgba(255, 255, 255,0.3); 
      border-bottom: 1px solid rgba(0, 0, 0, 0.1); 
    }
    .navigation li:last-of-type a {
      border-bottom: none;
    }
  }

/* Another example related to above and hover menu*/

   .wrapper {
    display: flex;
    flex-flow: row wrap;
  }
  
  /* We tell all items to be 100% width, via flex-basis */
  .wrapper > * {
    flex: 1 100%;
  }
  
  /* We rely on source order for mobile-first approach
   * in this case:
   * 1. header
   * 2. article
   * 3. aside 1
   * 4. aside 2
   * 5. footer
   */
  
  /* Medium screens */
  @media all and (min-width: 600px) {
    /* We tell both sidebars to share a row */
    .aside { flex: 1 auto; }
  }
  
  /* Large screens */
  @media all and (min-width: 800px) {
    /* We invert order of first sidebar and main
     * And tell the main element to take twice as much width as the other two sidebars 
     */
    .main { flex: 2 0px; }
    .aside-1 { order: 1; }
    .main    { order: 2; }
    .aside-2 { order: 3; }
    .footer  { order: 4; }
  } 

  /* Let’s try something even better by playing with flex items flexibility! 
  What about a mobile-first 3-columns layout with full-width header and footer.
  And independent from source order. */

  .wrapper {
    display: flex;  
    flex-flow: row wrap;
    font-weight: bold;
    text-align: center; 
  }
  
  .wrapper > * {
    padding: 10px;
    flex: 1 100%;
  }
  
  .header {
    background: tomato;
  }
  
  .footer {
    background: lightgreen;
  }
  
  .main {
    text-align: left;
    background: deepskyblue;
  }
  
  .aside-1 {
    background: gold;
  }
  
  .aside-2 {
    background: hotpink;
  }
  
  @media all and (min-width: 600px) {
    .aside { flex: 1 0 0; }
  }
  
  @media all and (min-width: 800px) {
    .main    { flex: 3 0px; }
    .aside-1 { order: 1; } 
    .main    { order: 2; }
    .aside-2 { order: 3; }
    .footer  { order: 4; }
  }
  
  body {
    padding: 2em; 
  }